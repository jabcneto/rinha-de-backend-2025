worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # DNS resolver para Docker (resolver interno do Docker)
    resolver 127.0.0.11 valid=10s;

    # Logging otimizado
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log off;
    error_log /var/log/nginx/error.log warn;

    # Otimizações de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/plain
        text/css
        text/js
        text/xml
        text/javascript;

    # Rate limiting otimizado para alta performance
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=500r/s;
    limit_req_status 429;

    # Variáveis para endpoints
    map $request_uri $backend_pool {
        default "api1:9999";
    }

    server {
        listen 9999;
        server_name _;

        # Configurações de timeout
        client_max_body_size 1m;
        client_body_timeout 10s;
        client_header_timeout 10s;
        send_timeout 10s;

        # Rate limiting com burst maior
        limit_req zone=api_limit burst=100 nodelay;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Proxy para as APIs com load balancing manual
        location / {
            # Definir backends dinamicamente
            set $api1 "api1:9999";
            set $api2 "api2:9999";

            # Usar api1 como primário
            proxy_pass http://$api1;

            # Configurações de proxy
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeout settings
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            # Connection pooling
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            # Interceptar erros e redirecionar para fallback
            proxy_intercept_errors on;
            error_page 502 503 504 @fallback;
        }

        # Fallback para api2
        location @fallback {
            internal;
            proxy_pass http://api2:9999;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}
